# -*- coding: utf-8 -*-
"""PDA_deformation_metrics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hLdz7TFfNB8adCWflvvAKGWUFKuNuu6z

# Comparing Deformation Metrics
PDA can be used to calculate the following deformation metrics:
1. Effective Strain (strain)
2. Shear Strain (shear)
3. Non-affine Strain (non_affine)
4. Local Distance Difference Test (lddt)
5. Local Distance Difference (ldd)
6. Neighborhood Distance (neighbor_distance)
7. Root Mean Square Deviation (rmsd)
"""

# Commented out IPython magic to ensure Python compatibility.
### Loading the data for the tutorial
# %cd /content
!git clone https://github.com/mirabdi/PDAnalysis.git

# Change directory into the PDAnalysis repository
# %cd /content/PDAnalysis/
!git pull origin main
!ls

# The following paths lead to structures from the AlphaFold Database,
# for human and gorilla Lysozyme C
pathA = 'test_data/Lysozyme/AF-P61626-F1-model_v4.pdb'
pathB = 'test_data/Lysozyme/AF-P79179-F1-model_v4.pdb'


# If you wish to calculate strain using your own files,
# replace this code block with paths to your own files
# that you have uploaded to Google drive, for example:
#pathA = 'myDrive/myProtein/protein_A.pdb'
#pathB = 'myDrive/myProtein/protein_B.pdb'

# For reference, the structure of the data used in this analysis can be found here:
# https://github.com/mirabdi/PDAnalysis/tree/main/test_data/Lysozyme

# Install PDAnalysis and load modules
!pip install PDAnalysis --upgrade
from PDAnalysis import Protein, AverageProtein, Deformation
import matplotlib.pyplot as plt
import numpy as np

# Setting the parameters to use in the deformation calculation

# We will include residues in local neighborhoods if their Alpha-carbon
# positions are within 13 Angstroms of each other (neigh_cut).

# We will use a exclude any residues with pLDDT lower than 70 (min_plddt).
# This is only appropriate for AlphaFold-generated structures.
protein_kwargs = {"neigh_cut":13.0, "min_plddt":70}

# For each residue we will calculate Effective Strain (strain),
# and the distance to the nearest mutated residue (mut_dist)
deform_kwargs = {'method':'all'}

### Calculate mutliple deformation metrics

# Load each protein, with the parameters specified before (protein_kwargs)
protA = Protein(pathA, **protein_kwargs)
protB = Protein(pathB, **protein_kwargs)

# Initialize the Deformation object
deform = Deformation(protA, protB, **deform_kwargs)
# Run the calculations outlined in deform_kwargs['method']
deform.run()

metrics = ["Effective Strain", "Shear Strain", "Non-affine Strain",
           "LDDT", "LDD", "Neighborhood Distance", "RMSD"]
deformation_metrics = [deform.strain, deform.shear, deform.non_affine,
                       deform.lddt, deform.ldd, deform.neighbor_distance,
                       deform.rmsd_per_residue]

fig, ax = plt.subplots(len(deformation_metrics), 1, figsize=(12,14))
fig.subplots_adjust(hspace=0.7)
X = np.arange(protA.seq_len) + 1
for i, dm in enumerate(deformation_metrics):
    ax[i].plot(X, dm)

    # Annotate the x-axis
    nstep = 10
    ax[i].set_xticks(X[::nstep])
    ax[i].set_xticklabels([f"{i}\n{s}" for i, s in enumerate(protA.sequence) if (i % nstep == 0)])
    ax[i].set_xlabel("Protein Sequence (position / amino acid)")
    ax[i].set_ylabel(metrics[i])

### LDDT thresholds can be modified to make it more sensitive to small changes

# Default thresholds = [0.5, 1, 2, 4]
deform_kwargs = {'method':'lddt'}
deform = Deformation(protA, protB, **deform_kwargs)
deform.run()
lddt_original = deform.lddt

deform_kwargs = {'method':'lddt', 'lddt_cutoffs':[0.125, 0.25, 0.5, 1]}
deform = Deformation(protA, protB, **deform_kwargs)
deform.run()
lddt_sensitive = deform.lddt

fig, ax = plt.subplots()
ax.plot(X, lddt_original, label='original LDDT')
ax.plot(X, lddt_sensitive, label='sensitive LDDT')
ax.legend(loc='best', frameon=False)

# Annotate the x-axis
ax.set_xticks(X[::nstep])
ax.set_xticklabels([f"{i}\n{s}" for i, s in enumerate(protA.sequence) if (i % nstep == 0)])
ax.set_xlabel("Protein Sequence (position / amino acid)")
ax.set_ylabel("LDDT")